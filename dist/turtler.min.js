require=function(){function b(c,d,e){function a(h,i){if(!d[h]){if(!c[h]){var j="function"==typeof require&&require;if(!i&&j)return j(h,!0);if(g)return g(h,!0);var k=new Error("Cannot find module '"+h+"'");throw k.code="MODULE_NOT_FOUND",k}var f=d[h]={exports:{}};c[h][0].call(f.exports,function(b){var d=c[h][1][b];return a(d?d:b)},f,f.exports,b,c,d,e)}return d[h].exports}for(var g="function"==typeof require&&require,f=0;f<e.length;f++)a(e[f]);return a}return b}()({turtler:[function(a,b){b.exports=class{constructor(a,b={}){if(!Array.isArray(a))throw new Error("data should be an array of arrays");let{hasHeader:c=!0,columnSeparator:d=" | ",headerSeparator:e="="}=b;this.data=a,this.hasHeader=c,this.columnSeparator=d,this.headerSeparator=e}getSize(){const{data:a}=this;let b=0,c=[];return a.forEach((a)=>{if(!Array.isArray(a))throw new Error("data should be an array of arrays");if(b||(b=a.length),b!==a.length)throw new Error("columns are not formed properly");a.forEach((a,b)=>{if("string"!=typeof a)throw new Error("column values should be strings");(!c[b]||c[b]<a.length)&&(c[b]=a.length)})}),c}ascii(){const{data:a,hasHeader:b,columnSeparator:c,headerSeparator:d}=this;let e="",f=this.getSize();return a.forEach((a,g)=>{a=a.map((a,b)=>{let c=" ".repeat(f[b]-a.length);return a+c}).join(c),e+=`${a}\n`,0===g&&b&&d&&(e+=d[0].repeat(f.reduce((c,a)=>c+a,0)+c.length*(f.length-1))+"\n")}),e}markdown(){const{data:a}=this;let b="",c=this.getSize();return a.forEach((a,d)=>{a=a.map((a,b)=>a+" ".repeat(c[b]-a.length)).join(" | "),b+=`| ${a} |\n`,0===d&&(b+=c.map((a,b)=>0==b?"|"+"-".repeat(a+2)+"|":"-".repeat(a+2)+"|").join("")+"\n")}),b}html(){const{data:a}=this;let b="",c="";return a.forEach((a,d)=>{0===d?b+=`<tr>
          ${a.map((a)=>`<th>${a}</th>`).join("")}
        </tr>`:c+=`<tr>
          ${a.map((a)=>`<td>${a}</td>`).join("")}
        </tr>`}),`<table>
      <thead>
        ${b}
      </thead>
      <tbody>
        ${c}
      </tbody>
    </table>`.replace(/\n/g,"")}toString(){return this.ascii()}}},{}]},{},[]);